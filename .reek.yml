# We want to execute Reek for CICD verification step purposes. Not all instances of a smell are offenses; in the case of
# smells like FeatureEnvy, sometimes it's the opposite. We only enable detectors if we think almost all instances of a
# smell mean that the code can be refactored to be better, and that checking in the offending code requires a
# justification in those cases. If you want to detect code that offends the disabled detectors, edit the file
# temporarily.

detectors:
  UncommunicativeParameterName:
    # Delegate this check to rubocop.
    enabled: false
  TooManyStatements:
    # Delegate this check to rubocop.
    enabled: false
  TooManyMethods:
    # Delegate this check to rubocop's measuring cops.
    enabled: false
  UncommunicativeVariableName:
    # (1) Delegate this check to rubocop.
    # (2) Names can be terser if the scope of the name is short.
    enabled: false

  TooManyInstanceVariables:
    # The number of instance variables easily explodes when we use instance variables to cache what otherwise are
    # parameters to instance methods. However a class is more likely in need of refactoring in case the instance
    # variables hold state that mutates during the call to one public instance method.
    max_instance_variables: 10

  FeatureEnvy:
    # Supressing this smell is less important than upholding other principles. Only check this smell occasionally.
    enabled: false
  UtilityFunction:
    # Supressing this smell is less important than upholding other principles.
    enabled: false
  DuplicateMethodCall:
    # Instances of this smell don't necessarily indicate code we are not confident in. Only check this smell
    # occasionally.
    enabled: false
  ControlParameter:
    # From documentation at time of writing this:
    # > Control Coupling is a kind of duplication, because the calling method already knows which path should be taken.
    #
    # For behavior impacted by external factors such as user input, the best place to decide the code path to take might
    # not be the calling method.
    enabled: false

  NilCheck:
    # The cost of nil checks is not high enough to enable this smell by default.
    enabled: false

  DataClump:
    # Only check this smell occasionally.
    enabled: false

  LongParameterList:
    # I think 4 parameters means something can be refactored but it's not beyond the scope of manageability (e.g., if
    # all most of the parameters stand for some obvious configuration values).
    max_params: 4
    exclude:
      # Param objects representing request itself should be introduced to solve the following:
      - "SymDiffer::DifferentialEquationApproximationIllustrator#illustrate_approximation"
      - "SymDiffer::DifferentiationVisualizer#initialize"
      - "SymDiffer::FirstOrderDifferentialEquationApproximator#approximate_solution"

  Attribute:
    exclude:
      # A desirable alternative would be to create new ExpressionTexts with the new inner text value, if it didn't
      # imply unnecessary object allocations. #text= is offered as an alternative that doesn't involve additional
      # allocations.
      - "SymDiffer::ExpressionTextLanguageCompiler::ExpressionText#text"
        # The expression_reducer and other attributes has to be provided dynamically, these dynamic attributes are the
        # best option for now:
      - "SymDiffer::ExpressionReduction::SumPartitionerVisitor#expression_reducer"
      - "SymDiffer::ExpressionReduction::SumPartitionerVisitor#factor_partitioner"
      - "SymDiffer::ExpressionReduction::FactorPartitionerVisitor#expression_reducer"

  BooleanParameter:
    exclude:
      # We pass some parameters to the initializer to slightly customize the behavior of a StringifierVisitor.
      # References to those parameters only happen internally of StringifierVisitor, so for the time being this is a
      # fairly innocuous usage of boolean parameters.
      - "SymDiffer::StringifierVisitor#initialize"
      - "SymDiffer::StringifierVisitor#build_visitor"

  RepeatedConditional:
    # We decided to take on the tech debt incurred by repeated conditionals across this call for the time being.
    exclude:
      - "SymDiffer::StringifierVisitor"
