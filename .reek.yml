# We want to execute Reek for CICD verification step purposes. Not all instances of a smell are offenses; in the case of
# smells like FeatureEnvy, sometimes it's the opposite. We only enable detectors if we think almost all instances of a
# smell mean that the code can be refactored to be better, and that checking in the offending code requires a
# justification in those cases. If you want to detect code that offends the disabled detectors, edit the file
# temporarily.

detectors:
  UncommunicativeParameterName:
    # Delegate this check to rubocop.
    enabled: false
  TooManyStatements:
    # Delegate this check to rubocop.
    enabled: false
  TooManyMethods:
    # Delegate this check to rubocop's measuring cops.
    enabled: false
  UncommunicativeVariableName:
    # (1) Delegate this check to rubocop.
    # (2) Names can be terser if the scope of the name is short.
    enabled: false

  FeatureEnvy:
    # Supressing this smell is less important than upholding other principles. Only check this smell occasionally.
    enabled: false
  UtilityFunction:
    # Supressing this smell is less important than upholding other principles.
    enabled: false
  DuplicateMethodCall:
    # Instances of this smell don't necessarily indicate code we are not confident in. Only check this smell
    # occasionally.
    enabled: false
  ControlParameter:
    # From documentation at time of writing this:
    # > Control Coupling is a kind of duplication, because the calling method already knows which path should be taken.
    #
    # For behavior impacted by external factors such as user input, the best place to decide the code path to take might
    # not be the calling method.
    enabled: false

  NilCheck:
    # The cost of nil checks is not high enough to enable this smell by default.
    enabled: false

  DataClump:
    # Only check this smell occasionally.
    enabled: false

  LongParameterList:
    exclude:
      # We decided to take on the tech debt incurred by the 4 parameters of update_evaluation_stack_based_on_token and
      # it should be refactored.
      - "SymDiffer::ExpressionTextLanguageCompiler::ExpressionTreeBuilder#update_evaluation_stack_based_on_token"
      # We decided to take on the tech debt incurred by the 4 parameters of build_command_type_stack_item and it should
      # be refactored.
      - "SymDiffer::ExpressionTextLanguageCompiler::Checkers::IdentifierTokenChecker#build_command_type_stack_item"
      - "SymDiffer::ExpressionTextLanguageCompiler::Checkers::MultiplicationTokenChecker#build_command_type_stack_item"
      - "SymDiffer::ExpressionTextLanguageCompiler::Checkers::SubtractionTokenChecker#build_command_type_stack_item"
      - "SymDiffer::ExpressionTextLanguageCompiler::Checkers::SumTokenChecker#build_command_type_stack_item"
      # There are many configurable behaviors and parameters to the visualization process and output of the graphs
      # produced by this class. The tech debt is not significantly high at the time of writing this.
      - "SymDiffer::ExpressionAndDerivativeExpressionVisualizer#initialize"
      # In context the long parameter list makes sense and we've partially compacted the list already by e.g.,
      # introducing the EquationParameters object.
      - "SymDiffer::FirstOrderDifferentialEquationApproximator#approximate_solution"
      - "SymDiffer::GetFirstOrderDifferentialEquationApproximationInteractor#approximate_solution"

  Attribute:
    exclude:
      # A desirable alternative would be to create new ExpressionTexts with the new inner text value, if it didn't
      # imply unnecessary object allocations. #text= is offered as an alternative that doesn't involve additional
      # allocations.
      - "SymDiffer::ExpressionTextLanguageCompiler::ExpressionText#text"

  BooleanParameter:
    exclude:
      # We pass some parameters to the initializer to slightly customize the behavior of a StringifierVisitor.
      # References to those parameters only happen internally of StringifierVisitor, so for the time being this is a
      # fairly innocuous usage of boolean parameters.
      - "SymDiffer::StringifierVisitor#initialize"
      - "SymDiffer::StringifierVisitor#build_visitor"

  RepeatedConditional:
    # We decided to take on the tech debt incurred by repeated conditionals across this call for the time being.
    exclude:
      - "SymDiffer::StringifierVisitor"

  TooManyInstanceVariables:
    exclude:
      # There are many configurable behaviors and parameters to the visualization process and output of the graphs
      # produced by the following 2 classes. The tech debt is not significantly high at the time of writing this.
      - "SymDiffer::DifferentiationGraph::Builder"
      - "SymDiffer::ExpressionAndDerivativeExpressionVisualizer"
      # There are many configurable behaviors and parameters to the approximation process. The tech debt is not
      # significantly high at the time of writing this.
      - "SymDiffer::FirstOrderDifferentialEquationApproximator"
